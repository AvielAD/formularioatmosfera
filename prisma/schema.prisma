generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alumno {
  id                 Int                  @id @default(autoincrement())
  email              String?              @db.VarChar(250)
  nombre             String?              @db.VarChar(250)
  apellidop          String?              @db.VarChar(250)
  apellidom          String?              @db.VarChar(250)
  descripcion        String?              @db.VarChar(250)
  eventocurso_alumno eventocurso_alumno[]
}

model codigodescuento {
  id                 Int                  @id @default(autoincrement())
  nombre             String?              @db.VarChar(250)
  codigo             String?              @db.VarChar(50)
  descuento          Decimal?             @db.Money
  eventocurso_alumno eventocurso_alumno[]
}

model curso {
  id          Int           @id @default(autoincrement())
  nombre      String?       @db.VarChar(250)
  descripcion String?       @db.VarChar(250)
  temario     String?       @db.VarChar(250)
  costo       Decimal?      @db.Money
  eventocurso eventocurso[]
}

model eventocurso {
  id                   Int                  @id @default(autoincrement())
  idcurso              Int?
  fechainiciopromocion DateTime?            @db.Timestamptz(6)
  fechafinpromocion    DateTime?            @db.Timestamptz(6)
  fechainicio          DateTime?            @db.Timestamptz(6)
  idestadoeventocurso  Int                  @default(1)
  uuidpage             String               @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  curso                curso?               @relation(fields: [idcurso], references: [id], onDelete: NoAction, onUpdate: NoAction)
  estadoeventocurso    estadoeventocurso    @relation(fields: [idestadoeventocurso], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventocurso_estadoeventocurso")
  eventocurso_alumno   eventocurso_alumno[]
}

model eventocurso_alumno {
  idalumno          Int
  ideventocurso     Int
  fechainscripcion  DateTime?        @db.Timestamptz(6)
  costo             Decimal?         @db.Money
  idcodigodescuento Int?
  alumno            alumno           @relation(fields: [idalumno], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eventocurso       eventocurso      @relation(fields: [ideventocurso], references: [id], onDelete: NoAction, onUpdate: NoAction)
  codigodescuento   codigodescuento? @relation(fields: [idcodigodescuento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventocursoalumno_codigodescuento")

  @@id([idalumno, ideventocurso])
}

model categoriausuario {
  id                          Int                           @id @default(autoincrement())
  nombre                      String?                       @db.VarChar(250)
  categoriausuario_rolusuario categoriausuario_rolusuario[]
  usuario                     usuario[]
}

model categoriausuario_rolusuario {
  idcategoriausuario Int
  idrolusuario       Int
  categoriausuario   categoriausuario @relation(fields: [idcategoriausuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categoriauruaiorolusuario_categoriausuario")
  rolusuario         rolusuario       @relation(fields: [idrolusuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categoriauruaiorolusuario_rolusuario")

  @@id([idcategoriausuario, idrolusuario])
}

model rolusuario {
  id                          Int                           @id @default(autoincrement())
  nombre                      String?                       @db.VarChar(250)
  codigo                      String?                       @db.VarChar(20)
  categoriausuario_rolusuario categoriausuario_rolusuario[]
}

model usuario {
  id                 Int               @id @default(autoincrement())
  nombre             String?           @db.VarChar(250)
  apellido           String?           @db.VarChar(250)
  passkey            String?
  idcategoriausuario Int?
  email              String?           @unique(map: "unique_email") @db.VarChar(250)
  categoriausuario   categoriausuario? @relation(fields: [idcategoriausuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_categoriausuario")
}

model estadoeventocurso {
  id          Int           @id @default(autoincrement())
  nombre      String?       @db.VarChar(100)
  codigo      String?       @db.VarChar(50)
  eventocurso eventocurso[]
}

view informacioninscritos {
  id          Int       @unique
  nombre      String?   @db.VarChar(250)
  apellidop   String?   @db.VarChar(250)
  curso       String?   @db.VarChar(250)
  inicio      DateTime? @db.Timestamptz(6)
  inscripcion DateTime? @db.Timestamptz(6)
  costo       Decimal?  @db.Money
}

view eventosview {
  id              Int       @unique
  curso           String?   @db.VarChar(250)
  temario         String?   @db.VarChar(250)
  costo           Decimal?  @db.Money
  iniciopromocion DateTime? @db.Timestamptz(6)
  finpromocion    DateTime? @db.Timestamptz(6)
  inicio          DateTime? @db.Timestamptz(6)
  estado          String?   @db.VarChar(100)
  uuid            String?   @db.Uuid
  inscritos       Int?
}
